import pandas as pd

df = pd.read_excel("marge_all.xlsx")
-------------------------------------------------------------

# 1. '제품명' 열 삭제
if '제품명' in df.columns:
    df.drop(columns=['제품명'], inplace=True)
-------------------------------------------------------------
  
# 2. '이미지_URL' 또는 '이미지_설명'이 결측인 행 제거
df.dropna(subset=['이미지_URL', '이미지_설명'], inplace=True)

-------------------------------------------------------------

import re

# '크기' 열에서 (장축)16.4 식으로 적힌 값을 분리하여 새 컬럼 생성
def extract_size(text, keyword):
    match = re.search(rf'\({keyword}\)([\d\.]+)', str(text))
    if match:
        try:
            return float(match.group(1).strip('.'))  # 마침표 제거 후 float 변환
        except ValueError:
            return None
    return None

# 적용
if '크기' in df.columns:
    df['장축'] = df['크기'].apply(lambda x: extract_size(x, '장축'))
    df['단축'] = df['크기'].apply(lambda x: extract_size(x, '단축'))
    df['두께'] = df['크기'].apply(lambda x: extract_size(x, '두께'))
    df.drop(columns=['크기'], inplace=True)

-------------------------------------------------------------

# 4. '보험코드' 열 삭제
if '보험코드' in df.columns:
    df.drop(columns=['보험코드'], inplace=True)
-------------------------------------------------------------
              
# 5. 열 이름에 공백이 있는 경우 대비해 전체 정리 (선택 사항)
df.columns = df.columns.str.strip()

# 5-1. '사용상의주의사항' + '사용상주의사항' 통합 (둘 다 있을 때만)
if '사용상의주의사항' in df.columns and '사용상주의사항' in df.columns:
    df['사용시주의사항'] = df[['사용상의주의사항', '사용상주의사항']].fillna('').agg(' '.join, axis=1)
    df.drop(columns=['사용상의주의사항', '사용상주의사항'], inplace=True)

# 5-2. '사용시 주의사항' 열이 있을 경우에만 '사용상주의사항'로 보완
if '사용시 주의사항' in df.columns and '사용상주의사항' in df.columns:
    df['사용시 주의사항'] = df['사용시 주의사항'].fillna(df['사용상주의사항'])

    # 빈 문자열도 채워줌
    df['사용시 주의사항'] = df.apply(
        lambda row: row['사용상주의사항'] if not row['사용시 주의사항'] else row['사용시 주의사항'],
        axis=1
    )

    # 이후 '사용상주의사항' 삭제
    df.drop(columns=['사용상주의사항'], inplace=True)

# 5-3. '사용상의주의사항(전문가)'도 있으면 삭제
if '사용상의주의사항(전문가)' in df.columns:
    df.drop(columns=['사용상의주의사항(전문가)'], inplace=True)
-------------------------------------------------------------
              
# 6. '분할선' 열 삭제
if '분할선' in df.columns:
    df.drop(columns=['분할선'], inplace=True)
              
-------------------------------------------------------------
              
# 7. 이미지_설명 => 제품명으로 컬럼 명칭 수정
if '이미지_설명' in df.columns:
    df.rename(columns={'이미지_설명': '제품명'}, inplace=True)
              
-------------------------------------------------------------

# 8.실제로 파일 받아보니.. 여러 데이터가 없는 경우가 있음 -> 크롤링 문제, 사진 미제공 등의 문제 
# 데이터가 모두 비어있는 행을 제거 (제품명만 있고 나머지가 비어있는 경우 포함)-> 제품 정보가 없는경우 '약사'와의 상담 진행 후 진단 받으세요로 해결책 제안 

# 단, 제품명은 존재하고 나머지 주요 열이 모두 NaN인 행 제거를 위해 '제품명'을 제외한 열 기준으로 검사
cols_except_product = [col for col in df.columns if col != '제품명']
df_cleaned = df.dropna(axis=0, how='all', subset=cols_except_product)
              
-------------------------------------------------------------

# 9. '식별표기' 열에서 '분할선'이라는 단어 제거
if '식별표기' in df.columns:
    df['식별표기'] = df['식별표기'].astype(str).str.replace('분할선', ' ', regex=False).str.strip()

# 예: '마크, 분할' → '마크 분할'
df['식별표기'] = df['식별표기'].str.replace(",", " ", regex=False).str.strip()

df['식별표기'] = (
    df['식별표기']
    .str.replace(r"[,/\\|]", " ", regex=True)  # 쉼표, 슬래시, 역슬래시, 파이프
    .str.replace(r"\s+", " ", regex=True)     # 중복 공백 제거
    .str.strip()
)

-------------------------------------------------------------

# 10.제품명 전처리 -> 괄호, 문자,쉼표는 제거하고 모든 제품명의 형식을 동일화 
# 원본 제품명은 그대로 유지하고 '제품명_정제'라는 새 컬럼에 저장

import re

def preprocess_product_name(name):
    if pd.isna(name):
        return ""
    
    # 괄호 제거
    name = re.sub(r"\([^)]*\)", "", name)
    # 특수문자 제거 및 공백 정리
    name = re.sub(r'[_\-]', ' ', name)
    name = re.sub(r'\s+', ' ', name).strip()
    
    return name

# 원본은 그대로 두고 '제품명_정제' 컬럼 새로 생성
df["제품명_정제"] = df["제품명"].apply(preprocess_product_name)

-------------------------------------------------------------

# 11. 영양제 중복 여부 판단을 위한 전처리 -> 데이터에서 영양제인 것을 추출하자
# 필터만 잘 건다면 가능할 것! 영양제 여부는 성분정보 + 분류(일반의약품/전문의약품)로 판단

# 기준: '구분'이 일반의약품이면서, '성분정보'에 영양성분 키워드 포함된 경우
# 영양성분의 기준은 식약처에서 공식적으로 제공한 데이터 활용

import re

# 1. 성분정보 전처리 함수 (괄호, 단위, 숫자 제거 + 쉼표/슬래시 기준 분리)
def extract_ingredient_list(text):
    if pd.isna(text):
        return []
    
    # 괄호 제거
    text = re.sub(r"\([^)]*\)", "", text)
    # 숫자 + 단위 제거
    text = re.sub(r"\d+(\.\d+)?\s*(mg|밀리그램|%)", "", text, flags=re.IGNORECASE)
    # 줄바꿈, 특수문자 처리
    text = text.replace("\n", ",").replace("/", ",")
    # 쉼표 기준 분리
    parts = [p.strip() for p in text.split(",") if p.strip()]
    return parts

# 2. 성분 리스트 컬럼 생성
df["성분명_리스트"] = df["성분정보"].apply(extract_ingredient_list)

# 3. 영양성분 키워드 정의
supplement_keywords = [
    "비타민", "미네랄", "무기질", "마그네슘", "칼슘", "아연", "철", "엽산",
    "루테인", "오메가", "실리마린", "코엔자임", "셀레늄", "크롬", "비오틴",
    "토코페롤", "피리독신", "티아민", "리보플라빈", "시아노코발라민", "아스코르브산"
]

# 4. 복합 기준 함수 정의: '일반의약품'이면서 성분명 리스트에 키워드 포함
def is_supplement_row(row):
    if row["구분"] != "일반의약품" or not isinstance(row["성분명_리스트"], list):
        return False
    return any(any(keyword in ingredient for keyword in supplement_keywords) for ingredient in row["성분명_리스트"])

# 5. 적용
df["영양제여부"] = df.apply(is_supplement_row, axis=1)

-------------------------------------------------------------

# 전처리 완료된 데이터 저장
df.to_excel("final_data.xlsx", index=False)

